import { isValidReviewComment, hasCriticalIssues } from './src/utils';

console.log('=== TESTE FINAL DE VALIDA√á√ÉO - CEN√ÅRIOS COMPLEXOS ===\n');

// Teste 1: Coment√°rio sobre problema de sintaxe real (deve ser aceito)
const syntaxComment = `
üö® ERROS GROTESCOS:

**lib/models/user_model.dart:**
- Sintaxe inv√°lida na defini√ß√£o da classe que impede compila√ß√£o do projeto.
`.trim();

console.log('1. Sintaxe inv√°lida:');
console.log('Resultado:', isValidReviewComment(syntaxComment, false) ? '‚úÖ ACEITO' : '‚ùå REJEITADO');

// Teste 2: Coment√°rio sobre vers√£o misturado com problema t√©cnico (deve ser rejeitado)
const mixedVersionComment = `
A vers√£o foi alterada de 1.0.0 para 1.0.1 seguindo a conven√ß√£o de versionamento sem√¢ntico.
`.trim();

console.log('2. Vers√£o misturada:');
console.log('Resultado:', isValidReviewComment(mixedVersionComment, false) ? '‚úÖ ACEITO' : '‚ùå REJEITADO');

// Teste 3: Coment√°rio sobre MobX (deve ser aceito)
const mobxComment = `
‚ö†Ô∏è ERROS GRAVES:

**lib/stores/user_store.dart:**
- MobX @observable n√£o implementado corretamente para a propriedade user, causando problemas de reatividade.
`.trim();

console.log('3. MobX problema:');
console.log('Resultado:', isValidReviewComment(mobxComment, false) ? '‚úÖ ACEITO' : '‚ùå REJEITADO');

// Teste 4: Coment√°rio sobre GetIt (deve ser aceito)
const getitComment = `
‚ö†Ô∏è ERROS GRAVES:

**lib/app/app_module.dart:**
- Dependency injection n√£o configurado corretamente, UserController n√£o est√° registrado no GetIt.
`.trim();

console.log('4. GetIt problema:');
console.log('Resultado:', isValidReviewComment(getitComment, false) ? '‚úÖ ACEITO' : '‚ùå REJEITADO');

// Teste 5: Coment√°rio sobre Future mal implementado (deve ser aceito)
const futureComment = `
üö® ERROS GROTESCOS:

**lib/services/auth_service.dart:**
- Future<User> login() implementado incorretamente, pode causar crash quando await √© usado.
`.trim();

console.log('5. Future problema:');
console.log('Resultado:', isValidReviewComment(futureComment, false) ? '‚úÖ ACEITO' : '‚ùå REJEITADO');

// Teste 6: Coment√°rio sobre aninhamento excessivo (deve ser aceito)
const nestingComment = `
üîç L√ìGICAS COMPLEXAS:

**lib/utils/form_validator.dart:**
- M√©todo validate() possui aninhamento excessivo de condicionais (mais de 4 n√≠veis), dificultando manuten√ß√£o.
`.trim();

console.log('6. Aninhamento excessivo:');
console.log('Resultado:', isValidReviewComment(nestingComment, false) ? '‚úÖ ACEITO' : '‚ùå REJEITADO');

// Teste 7: Coment√°rio sobre problema de widget (deve ser aceito)
const widgetProblemComment = `
üö® ERROS GROTESCOS:

**lib/widgets/custom_card.dart:**
- Widget pode retornar null em algumas condi√ß√µes, causando runtime error na renderiza√ß√£o.
`.trim();

console.log('7. Widget problema:');
console.log('Resultado:', isValidReviewComment(widgetProblemComment, false) ? '‚úÖ ACEITO' : '‚ùå REJEITADO');

// Teste 8: Coment√°rio sobre problema de build (deve ser aceito)
const buildProblemComment = `
üö® PROBLEMAS CR√çTICOS DE BUILD:

**android/app/build.gradle:**
- Depend√™ncia flutter_launcher_icons com vers√£o incompat√≠vel que quebra o build.
`.trim();

console.log('8. Build problema:');
console.log('Resultado:', isValidReviewComment(buildProblemComment, true) ? '‚úÖ ACEITO' : '‚ùå REJEITADO');

// Teste 9: Coment√°rio sobre formata√ß√£o apenas (deve ser rejeitado)
const formatOnlyComment = `
Apenas formata√ß√£o foi alterada no arquivo, sem mudan√ßas funcionais.
`.trim();

console.log('9. Formata√ß√£o apenas:');
console.log('Resultado:', isValidReviewComment(formatOnlyComment, false) ? '‚úÖ ACEITO' : '‚ùå REJEITADO');

// Teste 10: Coment√°rio sobre legibilidade (deve ser rejeitado)
const readabilityComment = `
O c√≥digo teve sua legibilidade ligeiramente reduzida com a refatora√ß√£o.
`.trim();

console.log('10. Legibilidade:');
console.log('Resultado:', isValidReviewComment(readabilityComment, false) ? '‚úÖ ACEITO' : '‚ùå REJEITADO');

console.log('\n=== RESUMO ===');
console.log('Testes que devem ser ACEITOS: 1, 3, 4, 5, 6, 7, 8');
console.log('Testes que devem ser REJEITADOS: 2, 9, 10');
console.log('');

// Teste final: Coment√°rio muito complexo e real
const complexRealComment = `
‚ö†Ô∏è ERROS GRAVES:

**lib/app/utils/utils.dart:**
- M√©todo validarSDK() n√£o retorna um valor, mas est√° definido como retornando int. Isso pode causar problemas em runtime se o valor de retorno for utilizado.

üîç L√ìGICAS COMPLEXAS:

**lib/app/utils/utils.dart:**
- M√©todo validarSDK() possui l√≥gica complexa com m√∫ltiplas condi√ß√µes aninhadas, dificultando a manuten√ß√£o e compreens√£o do c√≥digo.
- Fun√ß√£o excede 50 linhas e tem complexidade ciclom√°tica alta.

**lib/controller/home_controller.dart:**
- Controller n√£o est√° injetado via GetIt, violando padr√£o arquitetural.
- MobX @observable mal implementado para a propriedade isLoading.
`.trim();

console.log('TESTE FINAL - Coment√°rio complexo real:');
console.log('Resultado:', isValidReviewComment(complexRealComment, false) ? '‚úÖ ACEITO' : '‚ùå REJEITADO');
console.log('Esta √© a situa√ß√£o que voc√™ mencionou - deve ser ACEITO.'), console.log('');
