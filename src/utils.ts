export const geminiSystemContent = "Voc√™ √© um revisor t√©cnico s√™nior especializado em Flutter/Dart e arquitetura m√≥vel. Analise merge requests identificando APENAS erros grotescos e graves que violem os padr√µes de c√≥digo estabelecidos. IGNORE problemas menores e foque apenas em quest√µes cr√≠ticas que quebram a aplica√ß√£o ou violam padr√µes arquiteturais essenciais. Seja objetivo e espec√≠fico nas suas observa√ß√µes."

export const geminiSuggestContent = "Analise o seguinte diff de c√≥digo Flutter/Dart. Identifique APENAS:\n\n" +
    "üö® ERROS GROTESCOS (Cr√≠ticos - Quebram a aplica√ß√£o):\n" +
    "- Crashes/Exceptions n√£o tratadas\n" +
    "- Memory leaks evidentes\n" +
    "- Null pointer exceptions ou uso incorreto de nullable types\n" +
    "- Imports circulares ou depend√™ncias quebradas\n" +
    "- Threading issues (async/await, Future mal implementados)\n" +
    "- State management quebrado (MobX observers mal implementados)\n" +
    "- M√©todos que podem retornar null sendo usados como widgets sem verifica√ß√£o\n" +
    "- Tipos de retorno incompat√≠veis que causar√£o runtime errors\n\n" +
    "‚ö†Ô∏è ERROS GRAVES (Violam padr√µes arquiteturais):\n" +
    "- Classes Controller sem padr√£o 'Controlador[Funcionalidade]'\n" +
    "- Widgets sem prefixo DS do design system (DSbotaoPadrao, DStextfield)\n" +
    "- MobX mal implementado (@observable, @action, @computed, Observer widget)\n" +
    "- Controllers n√£o injetados via GetIt\n" +
    "- Falta de try-catch em opera√ß√µes cr√≠ticas\n" +
    "- ServiceStatus n√£o implementado para estados de loading/erro\n" +
    "- Uso de widgets nativos ao inv√©s do design system DS*\n" +
    "- NavigatorController ignorado para navega√ß√£o\n\n" +
    "üîç L√ìGICAS COMPLEXAS E FORA DOS PADR√ïES (Merecem aten√ß√£o):\n" +
    "- M√©todos com mais de 50 linhas ou complexidade ciclom√°tica alta\n" +
    "- Aninhamento excessivo de condicionais (mais de 4 n√≠veis)\n" +
    "- Loops complexos com m√∫ltiplas condi√ß√µes de sa√≠da\n" +
    "- L√≥gicas de neg√≥cio hardcoded sem abstra√ß√£o\n" +
    "- Fun√ß√µes com mais de 7 par√¢metros\n" +
    "- Uso de magic numbers ou strings sem constantes\n" +
    "- L√≥gica repetitiva que deveria ser extra√≠da em m√©todos\n" +
    "- Padr√µes anti-arquiteturais (God classes, Feature Envy, etc.)\n" +
    "- Uso inadequado de design patterns\n" +
    "- Viola√ß√£o do princ√≠pio da responsabilidade √∫nica\n" +
    "- Acoplamento excessivo entre classes\n" +
    "- L√≥gica de UI misturada com l√≥gica de neg√≥cio\n\n" +
    "IGNORE COMPLETAMENTE:\n" +
    "- Arquivos .g.dart, .freezed.dart, pubspec.yaml, pubspec.lock\n" +
    "- Arquivos de configura√ß√£o: AndroidManifest.xml, Info.plist, build.gradle, CMakeLists.txt\n" +
    "- Arquivos de recursos: strings.xml, colors.xml, dimens.xml, styles.xml\n" +
    "- Arquivos de assets: imagens, fontes, json de configura√ß√£o\n" +
    "- Arquivos de documenta√ß√£o: README.md, CHANGELOG.md, LICENSE\n" +
    "- Configura√ß√µes de IDE: .vscode/, .idea/, analysis_options.yaml\n" +
    "- Formata√ß√£o, espa√ßos, quebras de linha\n" +
    "- Nomes de vari√°veis locais\n" +
    "- Coment√°rios ou documenta√ß√£o\n" +
    "- Quest√µes de UX/UI menores\n" +
    "- Altera√ß√µes em strings/textos\n" +
    "- Mudan√ßas de tradu√ß√£o/localiza√ß√£o\n" +
    "- Problemas de configura√ß√£o de permiss√µes Android/iOS\n" +
    "- Placeholders em arquivos de configura√ß√£o\n" +
    "- MUDAN√áAS DE VERS√ÉO (version, build number, etc.)\n" +
    "- Quest√µes de legibilidade ou estilo de c√≥digo\n" +
    "- Sugest√µes de estrutura√ß√£o que n√£o causam erros\n" +
    "- Recomenda√ß√µes de conven√ß√µes de versionamento\n" +
    "- Observa√ß√µes sobre numera√ß√£o arbitr√°ria de vers√µes\n\n" +
    "FOCO APENAS EM:\n" +
    "- Arquivos .dart que contenham l√≥gica de neg√≥cio\n" +
    "- Controllers, Services, Models, Widgets customizados\n" +
    "- Implementa√ß√µes de padr√µes arquiteturais\n" +
    "- PROBLEMAS T√âCNICOS que podem causar crashes ou bugs\n\n" +
    "FORMATO DA RESPOSTA:\n" +
    "Se encontrar problemas: Liste por arquivo com 'üö® ERROS GROTESCOS:', '‚ö†Ô∏è ERROS GRAVES:' e/ou 'üîç L√ìGICAS COMPLEXAS:'\n" +
    "Se NENHUM problema cr√≠tico: Responda EXATAMENTE: 'Nenhum problema cr√≠tico encontrado.'\n\n" +
    "IMPORTANTE: Apenas comente se h√° problemas que realmente quebram a aplica√ß√£o, violam padr√µes arquiteturais essenciais ou apresentam l√≥gicas excessivamente complexas que prejudicam a manutenibilidade. N√ÉO comente sobre configura√ß√µes de sistema, permiss√µes, arquivos que n√£o sejam c√≥digo Dart, mudan√ßas de vers√£o, ou quest√µes est√©ticas/legibilidade.\n\n" +
    "Aqui est√° o diff:"

export const geminiCompletionsConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 64,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
    model: "gemini-2.0-flash-lite",
}

export const delay = (time: number) => {
    return new Promise(resolve => setTimeout(resolve, time));
}

export const getDiffBlocks = (diff: string) => {
    const regex = /(?=@@\s-\d+(?:,\d+)?\s\+\d+(?:,\d+)?\s@@)/g;
    const diffBlocks: string[] = diff.split(regex);
    return diffBlocks;
}

export const getLineObj = (matches: RegExpMatchArray, item: string) => {
    const lineObj: { new_line?: number, old_line?: number } = {};
    const lastLine = item.split(/\r?\n/)?.reverse()?.[1]?.trim();
    const oldLineStart = +matches[1];
    const oldLineEnd = +matches[2] || 0;
    const newLineStart = +matches[3];
    const newLineEnd = +matches[4] || 0;
    if (lastLine?.[0] === '+') {
        lineObj.new_line = newLineStart + newLineEnd - 1;
    } else if (lastLine?.[0] === '-') {
        lineObj.old_line = oldLineStart + oldLineEnd - 1;
    } else {
        lineObj.new_line = newLineStart + newLineEnd - 1;
        lineObj.old_line = oldLineStart + oldLineEnd - 1;
    }
    return lineObj;
}

export const hasCriticalIssues = (geminiResponse: string): boolean => {
    // Remove espa√ßos e quebras de linha extras para normalizar a resposta
    const normalizedResponse = geminiResponse.trim().toLowerCase();
    
    // Verifica se a resposta indica que n√£o h√° problemas cr√≠ticos
    const noIssuesPatterns = [
        'nenhum problema cr√≠tico encontrado',
        'n√£o foram encontrados problemas cr√≠ticos',
        'n√£o h√° problemas cr√≠ticos',
        'sem problemas cr√≠ticos',
        'n√£o encontrei problemas cr√≠ticos',
        'nenhum erro cr√≠tico encontrado',
        'n√£o foram identificados problemas cr√≠ticos'
    ];
    
    // Se cont√©m algum padr√£o de "sem problemas", retorna false
    if (noIssuesPatterns.some(pattern => normalizedResponse.includes(pattern))) {
        return false;
    }
    
    // Verifica se cont√©m indicadores de problemas cr√≠ticos, erros graves ou l√≥gicas complexas
    const criticalIssuesPatterns = [
        'üö® erros grotescos',
        '‚ö†Ô∏è erros graves',
        'üîç l√≥gicas complexas',
        'üö® problemas cr√≠ticos de build',
        '‚ö†Ô∏è problemas graves de configura√ß√£o',
        'üö®',
        '‚ö†Ô∏è',
        'üîç',
        'erros grotescos',
        'erros graves',
        'l√≥gicas complexas',
        'problemas cr√≠ticos de build',
        'problemas graves de configura√ß√£o',
        'problema cr√≠tico',
        'problemas cr√≠ticos',
        'complexidade alta',
        'complexidade ciclom√°tica',
        'aninhamento excessivo',
        'l√≥gica complexa',
        'padr√£o anti-arquitetural',
        'viola√ß√£o do princ√≠pio',
        'acoplamento excessivo',
        'responsabilidade √∫nica',
        'quebrar o build',
        'falhas cr√≠ticas',
        'sintaxe inv√°lida',
        'depend√™ncias incompat√≠veis',
        'configura√ß√µes obrigat√≥rias ausentes'
    ];
    
    // Se cont√©m algum indicador de problema cr√≠tico, retorna true
    return criticalIssuesPatterns.some(pattern => normalizedResponse.includes(pattern));
}

export const isValidReviewComment = (geminiResponse: string, isPlatformFile: boolean = false): boolean => {
    // Verifica se h√° problemas cr√≠ticos
    if (!hasCriticalIssues(geminiResponse)) {
        return false;
    }
    
    // Verifica se a resposta n√£o √© muito curta (menos de 10 caracteres)
    if (geminiResponse.trim().length < 10) {
        return false;
    }
    
    const normalizedResponse = geminiResponse.trim().toLowerCase();
    
    // Filtros espec√≠ficos para coment√°rios irrelevantes (mais restritivos)
    const irrelevantPatterns = [
        // Mudan√ßas de vers√£o (padr√µes mais espec√≠ficos)
        'n√∫mero da vers√£o foi alterada',
        'vers√£o foi alterada de',
        'conven√ß√£o de versionamento',
        'esquema de versionamento',
        'numera√ß√£o arbitr√°ria',
        'build number foi alterado',
        'version code foi alterado',
        
        // Quest√µes est√©ticas/legibilidade (mais espec√≠ficos)
        'legibilidade foi reduzida',
        'legibilidade ligeiramente reduzida',
        'estrutura anterior para manter',
        'coment√°rio explicando a mudan√ßa',
        'simplifica√ß√£o seria √∫til',
        'manter a estrutura anterior',
        
        // Quest√µes n√£o cr√≠ticas (mais espec√≠ficos)
        'embora isso n√£o seja um bug',
        'n√£o √©, em si, um bug',
        'recomenda-se usar uma conven√ß√£o',
        'considere uma revis√£o da estrutura',
        'seria √∫til adicionar',
        'potencialmente problem√°tico, mas',
        
        // Formata√ß√£o e estilo (mais espec√≠ficos)
        'sem altera√ß√µes significativas',
        'apenas formata√ß√£o foi alterada',
        'mudan√ßa de texto simples',
        'altera√ß√£o de string apenas',
        'atualiza√ß√£o de texto apenas'
    ];
    
    // Se cont√©m padr√µes irrelevantes, rejeitar
    if (irrelevantPatterns.some(pattern => normalizedResponse.includes(pattern))) {
        return false;
    }
    
    // Para arquivos de plataforma, permitir conte√∫do de configura√ß√£o se for cr√≠tico
    if (!isPlatformFile && isConfigurationContent(geminiResponse)) {
        return false;
    }
    
    // Para arquivos de plataforma, padr√µes gen√©ricos s√£o diferentes
    if (isPlatformFile) {
        const platformGenericPatterns = [
            'pequenos ajustes de configura√ß√£o',
            'mudan√ßas de vers√£o que n√£o quebram',
            'placeholders que ser√£o substitu√≠dos',
            'apenas coment√°rios foram',
            'formata√ß√£o foi alterada'
        ];
        
        const hasGenericContent = platformGenericPatterns.some(pattern => 
            normalizedResponse.includes(pattern)
        );
        
        return !hasGenericContent;
    }
    
    // Para c√≥digo Dart, verificar se menciona problemas t√©cnicos reais
    const technicalProblemPatterns = [
        // Problemas de runtime
        'null pointer',
        'runtime error',
        'crash',
        'exception',
        'pode causar',
        'causando',
        'quebrar',
        'falha',
        
        // Problemas de tipo e retorno
        'n√£o retorna',
        'tipo incorreto',
        'tipo de retorno',
        'retornando',
        'definido como',
        'mas pode retornar',
        'sem verifica√ß√£o',
        
        // Problemas de widget e UI
        'widget',
        'ui',
        'interface',
        'renderiza√ß√£o',
        
        // Problemas de concorr√™ncia
        'memory leak',
        'threading',
        'async/await',
        'future',
        'await',
        'implementado incorretamente',
        
        // Problemas arquiteturais
        'state management',
        'dependency injection',
        'mobx',
        'getit',
        'controller',
        'observer',
        'injectable',
        'padr√£o arquitetural',
        'violando',
        'n√£o injetado',
        
        // Problemas de complexidade
        'complexidade',
        'ciclom√°tica',
        'aninhamento',
        'm√∫ltiplas condi√ß√µes',
        'mais de',
        'linhas',
        'n√≠veis',
        'manuten√ß√£o',
        'dificultando',
        
        // Problemas de build
        'build',
        'compila√ß√£o',
        'depend√™ncia',
        'incompat√≠vel',
        'quebrar o build',
        'sintaxe inv√°lida'
    ];
    
    // Deve conter pelo menos um padr√£o t√©cnico para ser v√°lido
    const hasTechnicalContent = technicalProblemPatterns.some(pattern => 
        normalizedResponse.includes(pattern)
    );
    
    return hasTechnicalContent;
}

export const hasComplexLogic = (geminiResponse: string): boolean => {
    const normalizedResponse = geminiResponse.trim().toLowerCase();
    
    // Padr√µes espec√≠ficos para l√≥gicas complexas
    const complexLogicPatterns = [
        'üîç l√≥gicas complexas',
        'complexidade ciclom√°tica',
        'aninhamento excessivo',
        'mais de 50 linhas',
        'mais de 4 n√≠veis',
        'loops complexos',
        'm√∫ltiplas condi√ß√µes',
        'l√≥gica hardcoded',
        'mais de 7 par√¢metros',
        'magic numbers',
        'magic strings',
        'l√≥gica repetitiva',
        'god class',
        'feature envy',
        'design pattern inadequado',
        'responsabilidade √∫nica',
        'acoplamento excessivo',
        'l√≥gica de ui misturada'
    ];
    
    return complexLogicPatterns.some(pattern => normalizedResponse.includes(pattern));
}

export const getCommentType = (geminiResponse: string): string => {
    const normalizedResponse = geminiResponse.trim().toLowerCase();
    
    if (normalizedResponse.includes('üö® problemas cr√≠ticos de build') || normalizedResponse.includes('problemas cr√≠ticos de build')) {
        return 'PROBLEMA CR√çTICO DE BUILD';
    }
    
    if (normalizedResponse.includes('‚ö†Ô∏è problemas graves de configura√ß√£o') || normalizedResponse.includes('problemas graves de configura√ß√£o')) {
        return 'PROBLEMA GRAVE DE CONFIGURA√á√ÉO';
    }
    
    if (normalizedResponse.includes('üö®') || normalizedResponse.includes('erros grotescos')) {
        return 'ERRO GROTESCO';
    }
    
    if (normalizedResponse.includes('‚ö†Ô∏è') || normalizedResponse.includes('erros graves')) {
        return 'ERRO GRAVE';
    }
    
    if (normalizedResponse.includes('üîç') || hasComplexLogic(geminiResponse)) {
        return 'L√ìGICA COMPLEXA';
    }
    
    return 'GERAL';
}

export const shouldIgnoreFile = (filePath: string): boolean => {
    if (!filePath) return true;
    
    // Normalizar o caminho do arquivo
    const normalizedPath = filePath.toLowerCase();
    
    // Lista de padr√µes de arquivos que devem ser TOTALMENTE ignorados
    const ignorePatterns = [
        // Arquivos gerados automaticamente
        '.g.dart',
        '.freezed.dart',
        '.gr.dart',
        '.config.dart',
        
        // Arquivos de configura√ß√£o do projeto (n√£o cr√≠ticos)
        'pubspec.lock',
        'analysis_options.yaml',
        'dart_tool/',
        '.packages',
        
        // Arquivos de configura√ß√£o de IDE
        '.vscode/',
        '.idea/',
        '.dart_tool/',
        '.flutter-plugins',
        '.flutter-plugins-dependencies',
        
        // Arquivos de assets
        '.png',
        '.jpg',
        '.jpeg',
        '.gif',
        '.svg',
        '.ttf',
        '.otf',
        '.woff',
        
        // Arquivos de documenta√ß√£o
        'readme.md',
        'changelog.md',
        'license',
        'contributing.md',
        
        // Arquivos de build e configura√ß√£o n√£o cr√≠ticos
        '.gitignore',
        '.gitattributes',
        
        // Arquivos de teste (opcional - pode ser comentado se quiser revisar testes)
        '_test.dart',
        'test/',
        
        // Arquivos de web
        'flutter_service_worker.js'
    ];
    
    // Verificar se o arquivo corresponde a algum padr√£o de ignorar
    return ignorePatterns.some(pattern => 
        normalizedPath.includes(pattern) || 
        normalizedPath.endsWith(pattern) ||
        normalizedPath.startsWith(pattern)
    );
}

export const isPlatformFile = (filePath: string): boolean => {
    if (!filePath) return false;
    
    const normalizedPath = filePath.toLowerCase();
    
    // Arquivos de plataforma que devem ser analisados mas com foco em problemas cr√≠ticos
    const platformPatterns = [
        'androidmanifest.xml',
        'build.gradle',
        'gradle.properties',
        'info.plist',
        'runner.entitlements',
        'cmakelists.txt',
        'pubspec.yaml'
    ];
    
    return platformPatterns.some(pattern => 
        normalizedPath.includes(pattern) || 
        normalizedPath.endsWith(pattern)
    );
}

export const isConfigurationContent = (content: string): boolean => {
    if (!content) return false;
    
    const normalizedContent = content.toLowerCase();
    
    // Padr√µes que indicam conte√∫do de configura√ß√£o
    const configPatterns = [
        'android:permission',
        'uses-permission',
        'androidmanifest',
        'info.plist',
        'cfbundleidentifier',
        'build.gradle',
        'dependencies {',
        'android {',
        'flutter {',
        'cmake_minimum_required',
        'target_link_libraries',
        'application_id',
        'placeholder',
        'tools:replace',
        'maxsdkversion',
        'required="false"'
    ];
    
    return configPatterns.some(pattern => normalizedContent.includes(pattern));
}

export const getPlatformPrompt = () => {
    return "Analise o seguinte diff de arquivo de configura√ß√£o de plataforma (Android/iOS/Flutter). Identifique APENAS problemas que podem QUEBRAR O BUILD ou causar falhas cr√≠ticas:\n\n" +
        "üö® PROBLEMAS CR√çTICOS DE BUILD:\n" +
        "- Sintaxe inv√°lida que impede compila√ß√£o\n" +
        "- Depend√™ncias incompat√≠veis ou com vers√µes conflitantes\n" +
        "- Configura√ß√µes obrigat√≥rias ausentes\n" +
        "- Chaves de API ou certificados inv√°lidos\n" +
        "- Permiss√µes essenciais removidas incorretamente\n" +
        "- Configura√ß√µes de build que quebram a compila√ß√£o\n" +
        "- Targets ou vers√µes m√≠nimas incompat√≠veis\n\n" +
        "‚ö†Ô∏è PROBLEMAS GRAVES DE CONFIGURA√á√ÉO:\n" +
        "- Configura√ß√µes de seguran√ßa comprometidas\n" +
        "- Permiss√µes excessivas desnecess√°rias\n" +
        "- Configura√ß√µes que podem causar crashes em produ√ß√£o\n" +
        "- Depend√™ncias desnecess√°rias que aumentam o tamanho do app\n\n" +
        "IGNORE COMPLETAMENTE:\n" +
        "- Pequenos ajustes de configura√ß√£o\n" +
        "- Mudan√ßas de vers√£o que n√£o quebram compatibilidade\n" +
        "- Adi√ß√£o de permiss√µes opcionais bem documentadas\n" +
        "- Placeholders que ser√£o substitu√≠dos no build\n" +
        "- Coment√°rios ou documenta√ß√£o\n" +
        "- Formata√ß√£o ou espa√ßamento\n\n" +
        "FORMATO DA RESPOSTA:\n" +
        "Se encontrar problemas cr√≠ticos: Liste com 'üö® PROBLEMAS CR√çTICOS DE BUILD:' e/ou '‚ö†Ô∏è PROBLEMAS GRAVES DE CONFIGURA√á√ÉO:'\n" +
        "Se NENHUM problema cr√≠tico: Responda EXATAMENTE: 'Nenhum problema cr√≠tico encontrado.'\n\n" +
        "IMPORTANTE: Apenas comente se a mudan√ßa pode realmente quebrar o build ou causar falhas cr√≠ticas em produ√ß√£o.\n\n" +
        "Aqui est√° o diff:";
}
