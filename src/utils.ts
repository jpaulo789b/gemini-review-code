export const geminiSystemContent = "Voc√™ √© um revisor t√©cnico s√™nior especializado em Flutter/Dart e arquitetura m√≥vel. Analise merge requests identificando APENAS erros grotescos e graves que violem os padr√µes de c√≥digo estabelecidos. IGNORE problemas menores e foque apenas em quest√µes cr√≠ticas que quebram a aplica√ß√£o ou violam padr√µes arquiteturais essenciais. Seja objetivo e espec√≠fico nas suas observa√ß√µes."

export const geminiSuggestContent = "Analise o seguinte diff de c√≥digo Flutter/Dart. Identifique APENAS:\n\n" +
    "üö® ERROS GROTESCOS (Cr√≠ticos - Quebram a aplica√ß√£o):\n" +
    "- Crashes/Exceptions n√£o tratadas\n" +
    "- Memory leaks evidentes\n" +
    "- Null pointer exceptions ou uso incorreto de nullable types\n" +
    "- Imports circulares ou depend√™ncias quebradas\n" +
    "- Threading issues (async/await, Future mal implementados)\n" +
    "- State management quebrado (MobX observers mal implementados)\n\n" +
    "‚ö†Ô∏è ERROS GRAVES (Violam padr√µes arquiteturais):\n" +
    "- Classes Controller sem padr√£o 'Controlador[Funcionalidade]'\n" +
    "- Widgets sem prefixo DS do design system (DSbotaoPadrao, DStextfield)\n" +
    "- MobX mal implementado (@observable, @action, @computed, Observer widget)\n" +
    "- Controllers n√£o injetados via GetIt\n" +
    "- Falta de try-catch em opera√ß√µes cr√≠ticas\n" +
    "- ServiceStatus n√£o implementado para estados de loading/erro\n" +
    "- Uso de widgets nativos ao inv√©s do design system DS*\n" +
    "- NavigatorController ignorado para navega√ß√£o\n\n" +
    "üîç L√ìGICAS COMPLEXAS E FORA DOS PADR√ïES (Merecem aten√ß√£o):\n" +
    "- M√©todos com mais de 50 linhas ou complexidade ciclom√°tica alta\n" +
    "- Aninhamento excessivo de condicionais (mais de 4 n√≠veis)\n" +
    "- Loops complexos com m√∫ltiplas condi√ß√µes de sa√≠da\n" +
    "- L√≥gicas de neg√≥cio hardcoded sem abstra√ß√£o\n" +
    "- Fun√ß√µes com mais de 7 par√¢metros\n" +
    "- Uso de magic numbers ou strings sem constantes\n" +
    "- L√≥gica repetitiva que deveria ser extra√≠da em m√©todos\n" +
    "- Padr√µes anti-arquiteturais (God classes, Feature Envy, etc.)\n" +
    "- Uso inadequado de design patterns\n" +
    "- Viola√ß√£o do princ√≠pio da responsabilidade √∫nica\n" +
    "- Acoplamento excessivo entre classes\n" +
    "- L√≥gica de UI misturada com l√≥gica de neg√≥cio\n\n" +
    "IGNORE COMPLETAMENTE:\n" +
    "- Arquivos .g.dart, .freezed.dart, pubspec.yaml, pubspec.lock\n" +
    "- Formata√ß√£o, espa√ßos, quebras de linha\n" +
    "- Nomes de vari√°veis locais\n" +
    "- Coment√°rios ou documenta√ß√£o\n" +
    "- Quest√µes de UX/UI menores\n" +
    "- Altera√ß√µes em strings/textos\n" +
    "- Mudan√ßas de tradu√ß√£o/localiza√ß√£o\n\n" +
    "FORMATO DA RESPOSTA:\n" +
    "Se encontrar problemas: Liste por arquivo com 'üö® ERROS GROTESCOS:', '‚ö†Ô∏è ERROS GRAVES:' e/ou 'üîç L√ìGICAS COMPLEXAS:'\n" +
    "Se NENHUM problema cr√≠tico: Responda EXATAMENTE: 'Nenhum problema cr√≠tico encontrado.'\n\n" +
    "IMPORTANTE: Apenas comente se h√° problemas que realmente quebram a aplica√ß√£o, violam padr√µes arquiteturais essenciais ou apresentam l√≥gicas excessivamente complexas que prejudicam a manutenibilidade.\n\n" +
    "Aqui est√° o diff:"

export const geminiCompletionsConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 64,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
    model: "gemini-2.0-flash-lite",
}

export const delay = (time: number) => {
    return new Promise(resolve => setTimeout(resolve, time));
}

export const getDiffBlocks = (diff: string) => {
    const regex = /(?=@@\s-\d+(?:,\d+)?\s\+\d+(?:,\d+)?\s@@)/g;
    const diffBlocks: string[] = diff.split(regex);
    return diffBlocks;
}

export const getLineObj = (matches: RegExpMatchArray, item: string) => {
    const lineObj: { new_line?: number, old_line?: number } = {};
    const lastLine = item.split(/\r?\n/)?.reverse()?.[1]?.trim();
    const oldLineStart = +matches[1];
    const oldLineEnd = +matches[2] || 0;
    const newLineStart = +matches[3];
    const newLineEnd = +matches[4] || 0;
    if (lastLine?.[0] === '+') {
        lineObj.new_line = newLineStart + newLineEnd - 1;
    } else if (lastLine?.[0] === '-') {
        lineObj.old_line = oldLineStart + oldLineEnd - 1;
    } else {
        lineObj.new_line = newLineStart + newLineEnd - 1;
        lineObj.old_line = oldLineStart + oldLineEnd - 1;
    }
    return lineObj;
}

export const hasCriticalIssues = (geminiResponse: string): boolean => {
    // Remove espa√ßos e quebras de linha extras para normalizar a resposta
    const normalizedResponse = geminiResponse.trim().toLowerCase();
    
    // Verifica se a resposta indica que n√£o h√° problemas cr√≠ticos
    const noIssuesPatterns = [
        'nenhum problema cr√≠tico encontrado',
        'n√£o foram encontrados problemas cr√≠ticos',
        'n√£o h√° problemas cr√≠ticos',
        'sem problemas cr√≠ticos',
        'n√£o encontrei problemas cr√≠ticos',
        'nenhum erro cr√≠tico encontrado',
        'n√£o foram identificados problemas cr√≠ticos'
    ];
    
    // Se cont√©m algum padr√£o de "sem problemas", retorna false
    if (noIssuesPatterns.some(pattern => normalizedResponse.includes(pattern))) {
        return false;
    }
    
    // Verifica se cont√©m indicadores de problemas cr√≠ticos, erros graves ou l√≥gicas complexas
    const criticalIssuesPatterns = [
        'üö® erros grotescos',
        '‚ö†Ô∏è erros graves',
        'ÔøΩ l√≥gicas complexas',
        'ÔøΩüö®',
        '‚ö†Ô∏è',
        'üîç',
        'erros grotescos',
        'erros graves',
        'l√≥gicas complexas',
        'problema cr√≠tico',
        'problemas cr√≠ticos',
        'complexidade alta',
        'complexidade ciclom√°tica',
        'aninhamento excessivo',
        'l√≥gica complexa',
        'padr√£o anti-arquitetural',
        'viola√ß√£o do princ√≠pio',
        'acoplamento excessivo',
        'responsabilidade √∫nica'
    ];
    
    // Se cont√©m algum indicador de problema cr√≠tico, retorna true
    return criticalIssuesPatterns.some(pattern => normalizedResponse.includes(pattern));
}

export const isValidReviewComment = (geminiResponse: string): boolean => {
    // Verifica se h√° problemas cr√≠ticos
    if (!hasCriticalIssues(geminiResponse)) {
        return false;
    }
    
    // Verifica se a resposta n√£o √© muito curta (menos de 10 caracteres)
    if (geminiResponse.trim().length < 10) {
        return false;
    }
    
    // Verifica se a resposta n√£o cont√©m apenas texto gen√©rico
    const genericPatterns = [
        'sem altera√ß√µes',
        'apenas formata√ß√£o',
        'mudan√ßa de texto',
        'altera√ß√£o de string',
        'atualiza√ß√£o de texto'
    ];
    
    const normalizedResponse = geminiResponse.trim().toLowerCase();
    const hasGenericContent = genericPatterns.some(pattern => 
        normalizedResponse.includes(pattern)
    );
    
    return !hasGenericContent;
}

export const hasComplexLogic = (geminiResponse: string): boolean => {
    const normalizedResponse = geminiResponse.trim().toLowerCase();
    
    // Padr√µes espec√≠ficos para l√≥gicas complexas
    const complexLogicPatterns = [
        'üîç l√≥gicas complexas',
        'complexidade ciclom√°tica',
        'aninhamento excessivo',
        'mais de 50 linhas',
        'mais de 4 n√≠veis',
        'loops complexos',
        'm√∫ltiplas condi√ß√µes',
        'l√≥gica hardcoded',
        'mais de 7 par√¢metros',
        'magic numbers',
        'magic strings',
        'l√≥gica repetitiva',
        'god class',
        'feature envy',
        'design pattern inadequado',
        'responsabilidade √∫nica',
        'acoplamento excessivo',
        'l√≥gica de ui misturada'
    ];
    
    return complexLogicPatterns.some(pattern => normalizedResponse.includes(pattern));
}

export const getCommentType = (geminiResponse: string): string => {
    const normalizedResponse = geminiResponse.trim().toLowerCase();
    
    if (normalizedResponse.includes('üö®') || normalizedResponse.includes('erros grotescos')) {
        return 'ERRO GROTESCO';
    }
    
    if (normalizedResponse.includes('‚ö†Ô∏è') || normalizedResponse.includes('erros graves')) {
        return 'ERRO GRAVE';
    }
    
    if (normalizedResponse.includes('üîç') || hasComplexLogic(geminiResponse)) {
        return 'L√ìGICA COMPLEXA';
    }
    
    return 'GERAL';
}
