import { hasCriticalIssues, isValidReviewComment } from './src/utils';

// Teste para verificar se a fun√ß√£o est√° funcionando corretamente
const testCases = [
    {
        input: "Nenhum problema cr√≠tico encontrado.",
        expected: false,
        description: "Deve retornar false para resposta sem problemas"
    },
    {
        input: "üö® ERROS GROTESCOS:\n- Null pointer exception encontrado na linha 15",
        expected: true,
        description: "Deve retornar true para erros grotescos"
    },
    {
        input: "‚ö†Ô∏è ERROS GRAVES:\n- Widget sem prefixo DS do design system",
        expected: true,
        description: "Deve retornar true para erros graves"
    },
    {
        input: "Apenas mudan√ßa de formata√ß√£o encontrada",
        expected: false,
        description: "Deve retornar false para mudan√ßas menores"
    },
    {
        input: "Altera√ß√£o de texto simples",
        expected: false,
        description: "Deve retornar false para altera√ß√µes de texto"
    },
    {
        input: "Problemas cr√≠ticos identificados: memory leak na fun√ß√£o",
        expected: true,
        description: "Deve retornar true quando menciona problemas cr√≠ticos"
    }
];

console.log('üß™ Testando fun√ß√£o hasCriticalIssues...\n');

testCases.forEach((testCase, index) => {
    const result = hasCriticalIssues(testCase.input);
    const isValidResult = isValidReviewComment(testCase.input);
    const status = result === testCase.expected ? '‚úÖ' : '‚ùå';
    
    console.log(`${status} Teste ${index + 1}: ${testCase.description}`);
    console.log(`   Input: "${testCase.input}"`);
    console.log(`   Expected: ${testCase.expected}, Got: ${result}`);
    console.log(`   isValidReviewComment: ${isValidResult}`);
    console.log('');
});

console.log('‚ú® Testes conclu√≠dos!');
